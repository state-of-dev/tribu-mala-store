generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  password      String?
  role          UserRole  @default(CUSTOMER)
  
  // Personal Information
  firstName     String?
  lastName      String?
  phone         String?
  birthDate     DateTime?
  
  // Shipping Address
  street        String?
  number        String?
  interior      String?
  neighborhood  String?
  city          String?
  state         String?
  zip           String?
  country       String?   @default("México")
  
  // Billing Address
  billingStreet       String?
  billingNumber       String?
  billingInterior     String?
  billingNeighborhood String?
  billingCity         String?
  billingState        String?
  billingZip          String?
  billingCountry      String?   @default("México")
  
  // Stripe Integration
  stripeCustomerId String?  @unique
  
  // Preferences
  savePaymentMethods Boolean @default(false)
  defaultShipping    Boolean @default(true)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  orders        Order[]
  sessions      Session[]
  paymentMethods PaymentMethod[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model PasswordReset {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("password_resets")
}

model Product {
  id              Int              @id @default(autoincrement())
  name            String
  description     String?
  price           Float
  stock           Int              @default(0) // Stock total para compatibilidad
  image1          String
  image2          String?
  image3          String?
  category        String?
  sizes           String[]
  colors          String[]
  slug            String?          @unique
  metaTitle       String?
  metaDescription String?
  isActive        Boolean          @default(true)
  isFeatured      Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  orderItems      OrderItem[]
  variants        ProductVariant[]

  @@map("products")
}

model ProductVariant {
  id        String   @id @default(cuid())
  productId Int
  size      String
  color     String
  stock     Int      @default(0)
  sku       String?  @unique // SKU opcional para cada variante
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, size, color])
  @@map("product_variants")
}

model Order {
  id              String        @id @default(cuid())
  orderNumber     String        @unique
  userId          String?
  customerName    String?
  customerEmail   String
  shippingAddress String
  shippingCity    String
  shippingZip     String
  shippingCountry String
  subtotal        Float
  shippingCost    Float         @default(0)
  tax             Float         @default(0)
  total           Float
  stripeSessionId String?       @unique
  stripePaymentId String?
  paymentStatus   PaymentStatus @default(PENDING)
  status          OrderStatus   @default(PENDING)
  customerNotes   String?
  adminNotes      String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  shippedAt       DateTime?
  deliveredAt     DateTime?
  items           OrderItem[]
  user            User?         @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderItem {
  id           String   @id @default(cuid())
  orderId      String
  productId    Int
  productName  String
  productPrice Float
  quantity     Int
  size         String?
  color        String?
  total        Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product      Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum UserRole {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
}

model PaymentMethod {
  id               String  @id @default(cuid())
  userId           String
  stripeMethodId   String  @unique
  last4            String
  brand            String
  expiryMonth      Int
  expiryYear       Int
  isDefault        Boolean @default(false)
  nickname         String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_methods")
}
